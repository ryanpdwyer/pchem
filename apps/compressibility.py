
import copy
import time
from os import write

import matplotlib as mpl
import matplotlib.lines as lines
import matplotlib.patches as patches
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st
from matplotlib.patches import Rectangle
from numpy.lib.function_base import interp
from numpy.lib.npyio import save
from scipy import interpolate
import CoolProp.CoolProp as CP
from io import StringIO

from util import write_excel

def vdW(Vbar, T, a, b, R=0.083145):
    return R*T/(Vbar-b) - a/(Vbar**2)

def ig(Vbar, T, R=0.083145):
    return R*T/Vbar

data = StringIO("""\
1000K,,200K,,500K,
X,Y,X,Y,X,Y
14.379701857146813,1.007737964506401,6.25711351081253,0.9445317115540468,12.058962329622716,0.9650481118012615
39.90783665991171,1.0088007884079992,20.181550675957,0.8621343391094931,37.58709713238761,0.9350406652316945
65.4359714626766,1.0133943248631385,36.42672736862562,0.7787342515200049,63.11523193515251,0.9103292874924405
90.9641062654415,1.0176347900629237,57.31338311634232,0.6931992741803503,88.64336673791746,0.8933854773709773
116.4922410682064,1.0229344690287703,81.68114815534517,0.6156137069854011,114.17150154068236,0.8817377360798253
142.0203758709713,1.0310587180374515,107.20928295811007,0.555595203710733,139.69963634344725,0.8757391348743404
167.54851067373625,1.0384768245354237,132.73741776087502,0.5167609757573128,165.22777114621215,0.8753896737545217
193.07664547650114,1.0487195010762291,158.26555256363991,0.4931088117841207,190.75590594897704,0.879983210209661
218.60478027926604,1.0579029638509718,183.7936873664048,0.4842856405358029,216.28404075174194,0.8905789580058201
244.13291508203093,1.067086426625715,209.3218221691697,0.4991182433962118,241.81217555450684,0.9050584896108753
269.6610498847958,1.0780352456772286,234.84995697193455,0.5351351215778699,267.3403103572718,0.9255402325569508
295.1891846875607,1.0907494210055129,260.3780917746995,0.5866871349951093,292.86844516003663,0.9491996168012133
320.7173194903257,1.101698240057026,285.90622657746434,0.6495374285836815,318.3965799628016,0.9806265686632671
346.2454542930905,1.1137062728746026,311.4343613802293,0.7240390735989402,343.9247147655664,1.0127596630360296
371.77358909585547,1.1274796619689496,335.80212641923214,0.7996864312276877,369.4528495683314,1.0501888262391037
397.3017238986203,1.1401938372972338,359.009521694473,0.880151442525607,394.9809843710962,1.091501773251073
422.82985870138526,1.1564387251790595,382.21691696971374,0.9656653727750903,417.02800988257496,1.1245210656443674
448.3579935041501,1.1687998292519897,405.4243122449546,1.0542863300716903,452.9994725591983,1.2015719176145034
473.88612830691505,1.1843385746231072,422.82985870138526,1.1123048182597919,478.52760736196313,1.2499462897335554
499.4142631096799,1.200936533760287,444.876884212864,1.2199722008163354,504.0557421647281,1.30361673068292
524.9423979124449,1.217534492897467,465.7635399605808,1.3059062786394189,529.5838769674931,1.360817884185826
550.4705327152096,1.2355447370560633,484.32945618077343,1.3886680040128745,555.1120117702578,1.4215497502422731
575.9986675179746,1.2546141949807221,502.8953724009661,1.4733716212907781,580.6401465730228,1.4844000438308456
601.5268023207395,1.274036724160735,521.4612886211587,1.5614735494014653,606.1682813757877,1.5514871924836675
627.0549371235045,1.2938123245961022,538.8668350775893,1.645014045476595,631.6964161785527,1.619986626157906
652.5830719262694,1.31535328130824,556.27238153402,1.7318834991022067,657.2245509813174,1.6927229148963938
678.1112067290342,1.3361880955096697,574.8382977542126,1.8248401569740131,682.7526857840824,1.7686368449330694
703.6393415317991,1.358435194732516,592.2438442106431,1.915038568150107,708.2808205868473,1.8466692025018694
729.1674763345641,1.3799761514446536,608.4890209033117,2.00136908011366,733.808955389612,1.9243484888153157
754.6956111373288,1.4025763219228542,624.7341975959803,2.0888092445940414,759.337090192377,2.003440060150178
780.2237459400937,1.4262357061671165,640.9793742886488,2.1784687141080763,784.865224995142,2.0818254889743324
805.7518807428587,1.4495420191560253,657.2245509813174,2.2703474886557666,810.3933597979069,2.160210917798487
831.2800155456237,1.473554474655642,672.309357910224,2.357526124603296,835.9214946006718,2.238949417877995
856.8081503483884,1.497920001410613,686.2337950753686,2.4401895640368028,861.4496294034366,2.317687917957504
882.3362851511533,1.522638599420938,700.1582322405129,2.5235003007717918,886.9777642062015,2.397485631803075
,,714.0826694056575,2.608105632109746,900.9022013713461,2.4301306433947447
,,728.0071065708021,2.6965947472565963,,
,,741.9315437359464,2.7812000785945505,,
""")
df = pd.read_csv(data, names=["P1000", "Z1000", "P200", "Z200",  "P500", "Z500"], skiprows=2)


def run():

    st.markdown("""# Compressibility factor
Experimental data and predictions from the van der Waals equation are shown below. The van der Waals equation is given by:

$$P = RT/(\\bar{V}-b) - a/\\bar{V}^2$$

""")
    
    a_default = 1.35
    b_default = 0.032
    R = 0.083145

    a = st.number_input("a (bar L² mol⁻²)", value=a_default, step=0.01)

    b= st.number_input("b (L mol⁻¹)", value=b_default, step=0.001, format="%.3f")

    # st.write(f"Critical temperature: {8*a/(27*R*b)} K")
    # st.write(df)
    Vbar = np.geomspace(0.1, 100, 1001)
    P_guess = np.geomspace(0.1, 900, 500)
    V200 = R*200/P_guess
    V500 = R*500/P_guess
    V1000 = R*1000/P_guess
    P200 = vdW(V200, 200.0, a, b)
    P500  = vdW(V500, 500.0, a, b)
    P1000 = vdW(V1000, 1000, a, b)

    placeholder = st.container()
    fig, ax = plt.subplots()
    # ax.plot(P_guess, P200, label="200 K")
    # ax.plot(P_guess, P500, label="500 K")
    # ax.plot(P_guess, P1000, label="1000 K")

    temperatures_default = [200, 500, 1000]
    temperatures = st.multiselect("Temperatures (K)", temperatures_default, default=[500])

    for T in temperatures:
        V = R*T/P_guess
        P = vdW(V, T, a, b)
        m = (P < 900) & (P > 0.01)
        line, = ax.plot(df['P'+str(T)].dropna().values*1/1.0135, df['Z'+str(T)].dropna().values, '.-', label=f"{T} K")
        ax.plot(P[m], P[m]/P_guess[m], '--',  color=line.get_markerfacecolor())
    
    ax.legend()
    ax.set_ylim(0, 3)
    ax.set_xlim(0, 950)
    ax.set_xlabel("Pressure $P$ (bar)")
    ax.set_ylabel("Compressibility factor $Z=\\frac{PV}{nRT}$")

    with placeholder:
        st.pyplot(fig)
        st.markdown("""\
The dotted lines show the van der Waals equation of state prediction and the solid line with points shows the experimental data. Select the other data sets using the box below.
                    """)
    



if __name__ == '__main__':
    run()
